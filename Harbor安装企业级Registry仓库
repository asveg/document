Harbor安装 企业级Registry仓库

第一节 环境要求和准备工作

当前实验软件版本
Python 2.7.5
Docker Engine 18.09.8
Docker Compose 1.24.1
harbor-offline-installer-1.8.0.tgz

实验环境：
docker：192.168.170.11
harbor仓库: 192.168.170.12

其它参数设置
# ntpdate cn.pool.ntp.org  #同步网络时间
# setenforce 0
# sed -i s#SELINUX=enforcing#SELINUX=disabled# /etc/selinux/config
# systemctl stop firewalld
# systemctl disable firewalld

第二节 安装docker

更新yum包
# yum update

添加 docker 源： 
# yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 或者使用国内阿里云或者清华的源：
# yum-config-manager --add-repo  https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 
# yum-config-manager --add-repo https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/dockerce.repo

卸载旧版本 Docker
# yum remove docker docker-common docker-selinux docker-engine

安装软件包
# yum install -y yum-utils device-mapper-persistent-data lvm2

从指定源安装 docker-ce ： 
# yum -y install docker-ce

启动docker：
# systemctl start docker 
# systemctl enable docker 
# systemctl status docker

查看是否开机运行：
# systemctl list-unit-files|grep docker 

确认docker版本
# docker version

第三节 docker-compose 安装

harbor 的几个组件是用 docker-compose 启动和管理的，所以首先安装 docker-compose

二进制包安装方法一：

（1）下载docker-compose：下载可能会很慢。可以web页面下载https://github.com/docker/compose/releases需要的版本，然后导入到/usr/local/bin修改文件名为docker-compose
# curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` /usr/local/bin/docker-compose
# chmod +x /usr/local/bin/docker-compose
# ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

查看 docker-compose 版本号
# docker-compose -version

PIP安装方法二：

这种方式是将 Compose 当作一个 Python 应用来从 pip 源中安装。执行安装命令：安装速度较快。
# sudo pip install -U docker-compose

为Docker配置加速器, 方便通过国内镜像服务器快速拉取Docker Hub提供的镜像。

# mkdir -p /etc/docker
# cat /etc/docker/daemon.json
{
  "registry-mirrors": ["https://v5d7kh0f.mirror.aliyuncs.com"]
}


(2)下载harborr安装包，配置Harbor：
# wget https://github.com/vmware/harbor/releases/download/1.8.0/harbor-offline-installer-1.8.0.tgz
#我下载的是offline离线包，这样在后续的部署及安装都会比较快，总共有500M左右的大小！

(3)解压，配置harbor：
# tar zxvf harbor-offline-installer-1.8.0.tgz
# cd harbor/
# ls
harbor.yml  install.sh  LICENSE  prepare
# vim harbor.yml
# cat harbor.yml |grep -v "#"|grep -v "^$"
hostname: 192.168.170.12
http:
  port: 80
harbor_admin_password: Harbor12345             
database:
  password: root123
data_volume: /data
clair:
  updaters_interval: 12
  http_proxy:
  https_proxy:
  no_proxy: 127.0.0.1,localhost,core,registry
jobservice:
  max_job_workers: 10
chart:
  absolute_url: disabled
log:
  level: info
  rotate_count: 50
  rotate_size: 200M
  location: /var/log/harbor
_version: 1.8.0
主要修改项如下：
	hostname: 修改成本机的ip地址
	harbor_admin_password:harbor初始管理员密码为Harbor12345,建议修改成自己的，其它详细参数请查看Harbor官方文档。

(4)执行安装脚本：
#会拉取几个镜像下来，及检查环境：
# ./install.sh

查看harbor对应容器信息（还可以执行"docker images"和"docker ps"查看harbor的镜像和容器情况）
# docker ps

"注意docker-compose"命令只能在当前harbor目录下使用（因为该目录下有harbor配置文件）
# docker-compose ps
# docker-compose stop/start/restart

Harbor 服务的关闭和启动
docker-compose up -d          # 后台启动，如果容器不存在根据镜像自动创建
docker-compose down -v        # 停止容器并删除容器
docker-compose start          # 启动容器，容器不存在就无法启动，不会自动创建镜像
docker-compose stop           # 停止容器

Harbor的日志路径：var/log/harbor/


第四节 使用Harbor私有仓库

到此便安装完成了，直接打开浏览器登陆http:ip，默认用户密码是：admin/Harbor12345

1、首先新增一个用户，用于添加、读取、删减等管理镜像操作：
	新增一个 myname 用户：
2、新增项目，用于存放镜像：
	新增一个my_data项目，并设置为私有项目，只有登陆了相关用户才可以操作；如果勾选了 "公开" 则所有人都可以读取；
3、进入my_data项目--用户，新增成员；对my_data项目进行相应权限的管理：
	新增在第一步新建myname这个用户，并设置为管理员；管理员对my_data这个项目拥有所有操作权限，push/pull/delete/复制策略等操作；开发人员只能push/pull；访客只能pull 。

第五节 harbor的http证书登录

1）如果是在docker主机登录，出现上面的报错：：

# docker login 192.168.170.12
Username: admin
Password:
Error response from daemon: Get https://192.168.170.12/v1/users/: dial tcp 192.168.170.12:443: connect: connection refused
在进行harbor登录或上传代码时，会报出上面错误！这是因为docker1.3.2版本开始默认docker registry使用的是https，而Harbor默认设置的是http方式而不是https，所以当执行用docker login、pull、push等，命令操作非https的docker regsitry的时就会报错。

解决办法：
在docker主机的/etc/docker/daemon.json文件里添加"insecure-registries"配置（第一行是之前添加的docker加速配置），注意两行之间有一个","逗号隔
# vim /etc/docker/daemon.json
{
  "registry-mirrors": ["https://v5d7kh0f.mirror.aliyuncs.com"],
  "insecure-registries": ["192.168.170.12"]
}

然后重启docker服务
# systemctl daemon-reload
# systemctl restart docker

接着再次验证harbor登录，发现就能登录上。

2）如果是在harbor本机登录，出现上面的报错：
# docker login 192.168.170.12
Username: admin
Password:
Error response from daemon: Get https://192.168.170.12/v1/users/: dial tcp 192.168.170.12:443: connect: connection refused
  
解决办法：
在/etc/docker/daemon.json 文件里添加"insecure-registries"配置 （第一行是之前添加的docker加速配置），注意两行之间有一个","逗号隔开
# vim /etc/docker/daemon.json
{
  "registry-mirrors": ["https://v5d7kh0f.mirror.aliyuncs.com"],
  "insecure-registries": ["192.168.170.12"]
}
  
修改过后重启docker, 然后重启Harbor服务
# systemctl restart docker
# docker-compose stop
# docker-compose start

然后再测试再harbor本机登录，即可成功。

登录的账号信息都保存到/root/.docker/config.json文件里了
# cat /root/.docker/config.json
{
        "auths": {
                "192.168.170.12": {
                        "auth": "YWRtaW46a2V2aW5AQk8xOTg3"
                }
        },
        "HttpHeaders": {
                "User-Agent": "Docker-Client/18.09.6 (linux)"
        }
  
只要/root/.docker/config.json里的信息不删除，后续再次登录的时候，就不用输入用户名和密码了

4、 从docker客户端，开始push镜像,push/pull镜像只能在docker主机上执行命令操作！对于私有镜像，不管是push还是pull都需要login之后才能操作。

#给镜像打标签：按照harbor_ip/{project-name}/{image-name}[:Tag]的方式打Tag
#  docker tag nginx:1.11.5 192.168.170.12/my_data/nginx:1.11.5
#  docker tag alpine 192.168.170.12/my_data/alpine

#push镜像
#  docker push 192.168.170.12/my_data/nginx:1.11.5
....
#  docker push 192.168.170.12/my_data/alpine
The push refers to a repository [192.168.170.12/my_data/alpine]
011b303988d2: Pushed 
latest: digest: sha256:1354db23ff5478120c980eca1611a51c9f2b88b61f24283ee8200bf9a54f2e5c size: 528

push上传镜像成功，然后在web上看一下镜像是否存在。


第六节 Harbor的https证书启用

在创建证书之前，为了方面验证，需要将前面在docker机器上/etc/docker/daemon.json文件里添加"insecure-registries"配置删除
# vim /etc/docker/daemon.json
{}
  
# rm -rf /root/.docker
    
重启docker服务
# systemctl restart docker
  
将harbor部署机自身的/etc/docker/daemon.json文件里添加"insecure-registries"配置也删除
# vim /etc/docker/daemon.json
{
  "registry-mirrors": ["https://v5d7kh0f.mirror.aliyuncs.com"]
}
  
# rm -rf /root/.docker
  
然后重启docker和docker-compose
# systemctl restart docker
# docker-compose down -t
# docker-compose up -d
  
1）harbor上创建证书存放目录：
# pwd
/root/harbor
# mkdir ssl
# cd ssl/
# pwd
/root/harbor/ssl

创建自己的CA证书（不使用第三方权威机构的CA来认证，自己充当CA的角色）
# openssl genrsa -out ca.key 4096   #生成根证书私钥（无加密）
 
 生成自签名证书（使用已有私钥ca.key自行签发根证书）
# openssl req -x509 -new -nodes -sha256 -key ca.key -days 365 -out ca.crt

上边2条等同如下：效果一样。
# openssl req  -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 365 -out ca.crt
Generating a 4096 bit RSA private key
......................................++
...................................................................................................................................................................................................................................................................++
writing new private key to 'ca.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:beijing
Locality Name (eg, city) [Default City]:beijing
Organization Name (eg, company) [Default Company Ltd]:DevOps               
Organizational Unit Name (eg, section) []:Tec
Common Name (eg, your name or your server's hostname) []:192.168.170.12
Email Address []:harbor@localhost.com
注释：
	req 　　  产生证书签发申请命令
	-x509 　　签发X.509格式证书命令。X.509是最通用的一种签名证书格式。
	-new 　　 生成证书请求
	-key     指定私钥文件
	-nodes   表示私钥不加密
	-out 　　 输出
	-subj    指定用户信息
	-days    有效期
2) 生成服务器端私钥和CSR签名请求
# openssl req -newkey rsa:4096 -nodes -sha256 -keyout 192.168.170.12.key  -out 192.168.170.12.csr
Generating a 4096 bit RSA private key
.++

writing new private key to '192.168.170.12.key'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [XX]:CN
State or Province Name (full name) []:beijing
Locality Name (eg, city) [Default City]:beijing
Organization Name (eg, company) [Default Company Ltd]:DevOps
Organizational Unit Name (eg, section) []:Tec
Common Name (eg, your name or your server's hostname) []:192.168.170.12
Email Address []:harbor@localhost.com
  
Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:
  
3) 签发服务器证书
# echo subjectAltName = IP:192.168.170.12 > extfile.cnf
# openssl x509 -req -days 365 -in 192.168.170.12.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extfile extfile.cnf -out 192.168.170.12.crt
Signature ok
subject=/C=CN/ST=beijing/L=beijing/O=DevOps/OU=Tec/CN=192.168.170.12/emailAddress=harbor@localhost.com
Getting CA Private Key
注释：
	x509           签发X.509格式证书命令。
	-req           表示证书输入请求。
	-days          表示有效天数
	-extensions    表示按OpenSSL配置文件v3_req项添加扩展。
	-CA            表示CA证书,这里为ca.crt
	-CAkey         表示CA证书密钥,这里为ca.key
	-CAcreateserial表示创建CA证书序列号
	-extfile  　　  指定文件
　
4) 设定证书 & 修改
查看证书所在路径, 后面将harbor.yaml文件中的路径也同样设定
# pwd
/root/harbor/ssl

5) 在/harbor目录下，修改harbor.yaml文件
先关闭docker-compose，并查看服务是否正常关闭
# pwd
/root/harbor
# docker-compose down -v
# docker-compose ps

修改harbor.yml配置文件为https模式。
# vim harbor.yml
	# http related config
	#http:
	  # port for http, default is 80. If https enabled, this port will redirect to https port
	  #port: 80
	  
	# https related config
	https:
	#   # https port for harbor, default is 443
	    port: 443
	#   # The path of cert and key files for nginx
	    certificate: /root/harbor/ssl/192.168.170.12.crt
	    private_key: /root/harbor/ssl/192.168.170.12.key
注意：
上面harbor.yaml文件中修改的配置格式一定要正确！"https"要顶格写，"port:443" 和 "certificate"、"private_key"保持缩进一致！

接着执行prepare脚本，将harbor修改的配置更新到 docker-compose.yml 文件
# ./prepare

重启docker-compose，查看状态
# docker-compose up -d
# docker-compose ps


1) 在harbor部署机本机确认login登陆 (使用80端口或443端口都可以，自动跳转的)

# docker login -u admin -p Harbor12345 192.168.170.12
WARNING! Using --password via the CLI is insecure. Use --password-stdin.
Error response from daemon: Get https://192.168.170.12:443/v2/: x509: certificate signed by unknown authority

解决办法：
# chmod 644 /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
# cat /root/harbor/ssl/192.168.170.12.crt >> /etc/pki/tls/certs/ca-bundle.crt
# chmod 444 /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
 
由于证书是docker的daemon需要用到的，所以需要重启docker服务，进而也要重启docker-compose
# systemctl restart docker
# docker-compose down -v
# docker-compose up -d
 
然后再次尝试在harbor本机登陆, 发现就可以正常登陆！！
# docker login -u admin -p Harbor12345 192.168.170.12

登陆的权限信息保存到/root/.docker/config.json 文件里了，只要这个文件不删除，下次就可以不需要输入用户名和密码直接登陆了！
[root@harbor-node harbor]# cat /root/.docker/config.json
{
        "auths": {
                "192.168.170.12": {
                        "auth": "YWRtaW46a2V2aW5AQk9CTzEyMw=="
                }
        },
        "HttpHeaders": {
                "User-Agent": "Docker-Client/18.09.6 (linux)"
        }
}

2）在docker主机上(这里客户机为192.168.170.11)测试harbor登陆：

就是需要将harbor服务端生成的CA证书拷贝到每个远程客户机的"/etc/docker/certs.d/harbor服务器的域名或ip/" 目录下
# mkdir /etc/docker/certs.d/192.168.170.12/
 
接着在harbor服务器将CA证书拷贝过来
# rsync -e "ssh -p22" -avpgolr ./* root@192.168.170.11:/etc/docker/certs.d/192.168.170.12/
 
然后在客户机上查看是否拷贝过来了harbor服务端的CA证书
# ls
192.168.170.12.crt  192.168.170.12.csr  192.168.170.12.key  ca.crt  ca.key  ca.srl  extfile.cnf

进行同样的授权操作
# chmod 644 /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
# cat /etc/docker/certs.d/192.168.170.12/192.168.170.12.crt >> /etc/pki/tls/certs/ca-bundle.crt
# chmod 444 /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem
 
重启docker服务
# systemctl restart docker
 
最后进行harbor登陆，就可以正常登陆了！
# docker login -u admin -p Harbor12345 192.168.170.12:443

查看本地生成的认证信息
# cat /root/.docker/config.json                          
{
        "auths": {
                "192.168.170.12:443": {
                        "auth": "YWRtaW46a2V2aW5AQk9CTzEyMw=="
                }
        }
}
之后，就可以测试上传和下载镜像，这里就不在演示了。



第六节 部署私有镜像仓库

6.1 安装 
# docker run -d -v /data/docker-registry:/var/lib/registry -p 5000:5000 --restart=always --privileged=true --name registry registry:latest 
注释: 
	-v /data/docker-registry:/var/lib/registry 本地的/data/docker-registry 映射到容器内 
	--restart=always 容器退出时总是重启容器 
	--name registry 指定容器的名称

6.2 调整配置 
由于Docker CLI默认以HTTPS访问，而部署的registry并未提供HTTPS，因此，需要在pull镜像的Docker主机（192.168.6.112）添加HTTP可信任：
# cat /etc/docker/daemon.json
{ "insecure-registries":["192.168.170.12:5000"]} 

# systemctl reload docker  使配置生效。 

6.3 验证操作 
推送、拉取等都不需要认证，也不需要在打标签时指定项目名，如下:
# docker tag louxe-open-api 192.168.170.12:5000/louxe-open-api 
# docker push 192.168.170.12:5000/louxe-open-api 
 
查看私有仓库中有哪些镜像:
curl http://192.168.170.12:5000/v2/_catalog 查看某个镜像有哪些标签： 


